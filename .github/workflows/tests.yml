name: Testing homework_project

on: push

jobs:
  lint:
    strategy:
      matrix:
        cmd:
          - black
          - ruff
          - mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install deps
        run: poetry install
      - name: Run lint check
        run: poetry run pre-commit run -a ${{ matrix.cmd }}
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env
        run: touch .env
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Update docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.28.0"
      - name: run tests
        run: docker-compose run --rm api pytest -vv
  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: [ lint, pytest ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Determine env variables
        id: determine_env_vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
            echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "REMOTE_HOST=${{ secrets.REMOTE_HOST_PROD }}" >> $GITHUB_OUTPUT
            echo "REMOTE_USER=${{ secrets.REMOTE_USER_PROD }}" >> $GITHUB_OUTPUT
            echo "REMOTE_TARGET=${{ secrets.REMOTE_TARGET_PROD }}" >> $GITHUB_OUTPUT
            echo "BRANCH_NAME=main" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch"
            exit 1
          fi
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.determine_env_vars.outputs.REMOTE_HOST }}
          username: ${{ steps.determine_env_vars.outputs.REMOTE_USER }}
          key: ${{ steps.determine_env_vars.outputs.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ steps.determine_env_vars.outputs.REMOTE_TARGET }}
            git switch ${{ steps.determine_env_vars.outputs.BRANCH_NAME }}
            git pull
            docker compose up --build -d

